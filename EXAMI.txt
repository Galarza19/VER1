public static boolean par(int a) {
        return (a % 2 == 0);
    }

    public static boolean impar(int a) {
        return (a % 2 != 0);
    }

    // SIN CICLO
    // 1
    public static boolean existePar(int a, int b, int c, int d) {
        return (par(a) || par(b) || par(c) || par(d));
    }

    // 2
    public static boolean todosPares(int a, int b, int c, int d) {
        return (par(a) && par(b) && par(c) && par(d));
    }

    // 3
    public static boolean alterno(int a, int b, int c, int d) {
        return (par(a) && impar(b) && par(c) && impar(d) ||
                par(b) && impar(c) && par(d) && impar(a) ||
                par(c) && impar(d) && par(a) && impar(b) ||
                par(d) && impar(a) && par(b) && impar(c));
    }

    // 4
    public static boolean palindrome(int a, int b, int c, int d) {
        return (a == d && b == c);
    }

    // 5
    public static boolean poker(int a, int b, int c, int d) {
        return (a == b && a == c && a != d) ||
                (a == b && a == d && a != c) ||
                (a == c && a == d && a != b) ||
                (b == c && b == d && b != a);
    }

    // 6
    public static boolean parImpar(int a, int b, int c, int d) {
        int p = 0, i = 0;
        if (par(a) || par(b) || par(c) || par(d))
            p++;
        if (impar(a) || impar(b) || impar(c) || impar(d))
            i++;
        return (p >= 1 && i >= 1);
    }

    // DIVISORES
    // 1
    public static void mostrarDivisoresAsc(int n) {
        for (int i = 1; i <= n; i++)
            if (n % i == 0)
                System.out.println(i);
    }

    // 2
    public static void mostrarDivisoresPares(int n) {
        for (int i = 1; i <= n; i++)
            if (n % i == 0 && par(i))
                System.out.println(i);
    }

    // 3
    public static int contarDivisores(int n) {
        int c = 0;
        for (int i = 1; i <= n; i++)
            if (n % i == 0)
                c++;
        return c;
    }

    // 4
    public static int cantidadDivisores(int n, int a, int b) {
        int c = 0;
        for (int i = a; i <= b; i++)
            if (n % i == 0)
                c++;
        return c;
    }

    // 5
    public static void divisoresComunes(int n, int m) {
        int i = 1;
        int lim = Math.min(n, m);
        while (i <= lim) {
            if (n % i == 0 && m % i == 0) {
                System.out.print(i);
            }
            i = i + 1;
        }
    }

    //DIGITOS
    // 1
    public static int sumaDig(int n) {
        int n1 = n, suma = 0;
        while (n1 > 0) {
            suma = suma + (n1 % 10);
            n1 = n1 / 10;
        }
        return suma;
    }

    // 2
    public static int contDig(int n) {
        int n1 = n, c = 0;
        while (n1 > 0) {
            c++;
            n1 = n1 / 10;
        }
        return c;
    }

    // 3
    public static boolean existePar(int n) {
        int n1 = n;
        while (n1 > 0) {
            if (par(n1 % 10))
                return true;
            n1 = n1 / 10;
        }
        return false;
    }

    //4
    public static int frecuencia(int n, int dig) 
    {
        int c = 0;
        int n1 = n;
        while(n1 > 0)
        {
            if((n1 % 10) == dig)
            {
                c++;
            }
            n1 = n1 / 10;
        }
        return c;
    }

    // 5
    public static boolean parImpar(int n) 
    {
        int n1 = n;
        int p = 0, im = 0;
        while(n1 > 0)
        {
            if(par(n1 % 10))
                p++;
            if(impar(n1 % 10))
                im++;
            n1 = n1 / 10;
        }
        return (p >= 1 && im >= 1);
    }